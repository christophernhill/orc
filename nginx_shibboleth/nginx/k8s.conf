# top-level http config for websocket headers
# If Upgrade is defined, Connection = upgrade
# If Upgrade is empty, Connection = close
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream orc-site {
  server 194.95.75.9:30078; # private node ip
  server 194.95.75.10:30078;
  server 194.95.75.11:30078;
  server 194.95.75.12:30078;
}

upstream grafana {
  server 194.95.75.9:30075;
}

upstream prometheus {
  server 194.95.75.9:30073;
}

upstream jhub {
  server 194.95.75.9:30080;
  server 194.95.75.10:30080;
  server 194.95.75.11:30080;
  server 194.95.75.12:30080;
}

upstream bhub {
  server 194.95.75.9:30081;
  server 194.95.75.10:30081;
  server 194.95.75.11:30081;
  server 194.95.75.12:30081;
}

upstream bjhub {
  server 194.95.75.9:30082;
  server 194.95.75.10:30082;
  server 194.95.75.11:30082;
  server 194.95.75.12:30082;
}

# HTTP server to redirect all 80 traffic to SSL/HTTPS
server {
    listen 80;
    server_name notebooks.gesis.org 194.95.75.9;
    access_log off;  # turn off access log
    # Tell all requests to port 80 to be 302 redirected to HTTPS
    return 302 https://$host$request_uri;
}

# HTTPS server
server {
    listen 443;
    ssl on;

    server_name notebooks.gesis.org 194.95.75.9;

    ssl_certificate /etc/letsencrypt_volume/live/notebooks.gesis.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt_volume/live/notebooks.gesis.org/privkey.pem;
    # https://www.nginx.com/resources/admin-guide/nginx-ssl-termination/#optimize
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_session_cache shared:le_nginx_SSL:50m;  # 50mb shared session cache
    ssl_session_timeout 1440m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS";
    ssl_dhparam /etc/letsencrypt_volume/dhparam.pem;

    # optimization
    access_log off;  # turn off access log
    client_body_buffer_size 128k;  # default is 8k|16k;
    client_max_body_size 1G;  # default is 1M
    proxy_buffers 32 32k;
    proxy_buffer_size 32k;

    location = /favicon.ico { access_log off; log_not_found off; }

    # Managing literal requests to orc site app
    location / {
        # remove entityID and return parameters in url, they are supplied in idpselect_config.js
        if ($query_string ~ "^(.*)entityID=(.*)$") {rewrite ^(.*)$ $uri? permanent;}
        if ($query_string ~ "^(.*)return=(.*)$") {rewrite ^(.*)$ $uri? permanent;}

        proxy_pass http://orc-site;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Grafana UI
    location /grafana/ {
        proxy_pass http://grafana/;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    # Prometheus
    location /prometheus/ {
        # https://github.com/prometheus/prometheus/issues/2193
        proxy_set_header Accept-Encoding "";
        proxy_pass http://prometheus/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        sub_filter_types text/html;
        sub_filter_once off;
        sub_filter '="/' '="/prometheus/';
        sub_filter 'var PATH_PREFIX = "";' 'var PATH_PREFIX = "/prometheus";';
        rewrite ^/prometheus/?$ /prometheus/graph redirect;
        rewrite ^/prometheus/(.*)$ /$1 break;
    }

    # Managing literal requests to the BinderHub
    location /binder/ {
        proxy_buffering off;
        proxy_pass http://bhub;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    # For JupyterHub of Binder
    location /binder/jupyter/ {
        proxy_pass http://bjhub;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Managing requests to the binder service of JupyterHub
    location /services/binder/ {
        proxy_buffering off;

        proxy_pass http://jhub;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
    # Managing requests to JupyterHub user servers
    location /user/ {
        proxy_pass http://jhub;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
    # Managing literal requests to the JupyterHub front end
    # with only a specific sub-path causes Shibboleth authentication.
    location /hub/ {
        proxy_pass http://jhub;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # websocket headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

       # Shibboleth login
       location = /hub/login {
            # Attributes from Shibboleth are introduced as headers by the FastCGI
            # authorizer so we must prevent spoofing.
            # The ``shib_clear_headers`` is a set of default header directives,
            # available in the `includes/` directory in this repository.
            include shib_clear_headers;
            # Add here your own extra attributes to be cleared. They get introduced as headers
            # by the FastCGI authorizer so we must prevent spoofing.
            # Add *all* attributes that your application uses, including all variations.
            more_clear_input_headers 'EPPN' 'mail' 'Email' 'DisplayName'
                                     'Commonname' 'Givenname' 'sn' 'cn' 'persistent-id';

            shib_request /shibauthorizer;
            # include shib_fastcgi_params  # used for attributes as environment variables
            shib_request_use_headers on;

            # This backend application will receive Shibboleth variables as request
            # headers (from Shibboleth's FastCGI authorizer)
            proxy_pass http://jhub;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # websocket headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
         }
    }

    # FastCGI authorizer for Auth Request module
    location = /shibauthorizer {
        internal;
        include fastcgi_params;
        fastcgi_pass unix:/var/run/shibboleth/shibauthorizer.sock;
    }

    # FastCGI responder
    location /Shibboleth.sso {
        include fastcgi_params;
        fastcgi_buffers 256 4k;
        fastcgi_pass unix:/var/run/shibboleth/shibresponder.sock;
    }
}
